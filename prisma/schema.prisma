// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and authorization
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  role          UserRole  @default(ANALYST)
  firmId        String
  firm          Firm      @relation(fields: [firmId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime?
  isActive      Boolean   @default(true)
  preferences   Json?
  notifications Notification[]
  approvals     Approval[]
  expenses      Expense[]
  comments      Comment[]
}

enum UserRole {
  ANALYST
  ASSOCIATE
  VP
  PARTNER
  CFO
  ADMIN
}

// Firm model representing private equity firms
model Firm {
  id            String    @id @default(cuid())
  name          String
  aum           Float
  users         User[]
  funds         Fund[]
  policies      Policy[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Fund model for managing fund-level data
model Fund {
  id            String    @id @default(cuid())
  name          String
  firmId        String
  firm          Firm      @relation(fields: [firmId], references: [id])
  committedCapital Float
  deployedCapital  Float
  startDate     DateTime
  endDate       DateTime
  status        FundStatus @default(ACTIVE)
  spvs          SPV[]
  expenses      Expense[]
  budgets       Budget[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum FundStatus {
  ACTIVE
  CLOSED
  LIQUIDATING
}

// SPV (Special Purpose Vehicle) model
model SPV {
  id            String    @id @default(cuid())
  name          String
  fundId        String
  fund          Fund      @relation(fields: [fundId], references: [id])
  budget        Float
  allocated     Float
  startDate     DateTime
  endDate       DateTime
  status        SPVStatus @default(ACTIVE)
  expenses      Expense[]
  budgets       Budget[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum SPVStatus {
  ACTIVE
  CLOSED
  LIQUIDATING
}

// Budget model for managing budgets at different levels
model Budget {
  id            String    @id @default(cuid())
  name          String
  amount        Float
  allocated     Float
  startDate     DateTime
  endDate       DateTime
  status        BudgetStatus @default(ACTIVE)
  entityType    EntityType
  entityId      String
  fundId        String?
  fund          Fund?     @relation(fields: [fundId], references: [id])
  spvId         String?
  spv           SPV?      @relation(fields: [spvId], references: [id])
  expenses      Expense[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum BudgetStatus {
  ACTIVE
  CLOSED
  DRAFT
}

enum EntityType {
  FUND
  SPV
  DEPARTMENT
}

// Expense model for tracking all expenses
model Expense {
  id            String    @id @default(cuid())
  amount        Float
  description   String
  category      ExpenseCategory
  status        ExpenseStatus @default(PENDING)
  date          DateTime
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  fundId        String?
  fund          Fund?     @relation(fields: [fundId], references: [id])
  spvId         String?
  spv           SPV?      @relation(fields: [spvId], references: [id])
  budgetId      String?
  budget        Budget?   @relation(fields: [budgetId], references: [id])
  receiptUrl    String?
  merchant      String
  location      String?
  policyChecks  PolicyCheck[]
  approvals     Approval[]
  comments      Comment[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum ExpenseCategory {
  TRAVEL
  ENTERTAINMENT
  OFFICE
  TECHNOLOGY
  CONSULTING
  LEGAL
  OTHER
}

enum ExpenseStatus {
  PENDING
  APPROVED
  REJECTED
  FLAGGED
}

// Policy model for spend policies
model Policy {
  id            String    @id @default(cuid())
  name          String
  description   String
  type          PolicyType
  condition     String
  action        PolicyAction
  status        PolicyStatus @default(ACTIVE)
  firmId        String
  firm          Firm      @relation(fields: [firmId], references: [id])
  policyChecks  PolicyCheck[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum PolicyType {
  AMOUNT
  CATEGORY
  TIME
  LOCATION
}

enum PolicyAction {
  REQUIRE_APPROVAL
  BLOCK_TRANSACTION
  FLAG_FOR_REVIEW
  REQUIRE_VERIFICATION
}

enum PolicyStatus {
  ACTIVE
  DRAFT
  ARCHIVED
}

// PolicyCheck model for tracking policy evaluations
model PolicyCheck {
  id            String    @id @default(cuid())
  expenseId     String
  expense       Expense   @relation(fields: [expenseId], references: [id])
  policyId      String
  policy        Policy    @relation(fields: [policyId], references: [id])
  result        Boolean
  details       Json?
  createdAt     DateTime  @default(now())
}

// Approval model for tracking expense approvals
model Approval {
  id            String    @id @default(cuid())
  expenseId     String
  expense       Expense   @relation(fields: [expenseId], references: [id])
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  status        ApprovalStatus
  comment       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

// Comment model for expense discussions
model Comment {
  id            String    @id @default(cuid())
  content       String
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  expenseId     String
  expense       Expense   @relation(fields: [expenseId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Notification model for system notifications
model Notification {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  type          NotificationType
  content       String
  read          Boolean   @default(false)
  createdAt     DateTime  @default(now())
}

enum NotificationType {
  APPROVAL_REQUEST
  POLICY_VIOLATION
  BUDGET_ALERT
  SYSTEM
}
